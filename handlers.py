from aiogram import types, F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

import kb
import states
from kb import menu_main
from models import DB
import utils


router = Router()
database = DB()
database.init_db()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É –∏ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_main,)


@router.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

# ------------------------ create trip ----------------------------
trip_name_templates = ['–ù–∞ —Ä–∞–±–æ—Ç—É', '–¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω']
trip_start_time_templates = ['–ó–∞–≤—Ç—Ä–∞ 7:20', '...']
trip_start_point_templates = ['60–∫–∞ 25–ë', '60–∫–∞ 25–ê', '–ë—Ä–∏–∑']
trip_finish_time_templates = ['–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—Å—è', '...']
trip_finish_point_templates = ['–†–∞–±–æ—Ç–∞', '–î–æ–º']

#@router.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
#async def with_puree(message: types.Message):
#    await message.reply("–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–ª–µ–¥ —à–∞–≥ —Å—Ü–µ–Ω–∞—Ä–∏—è")
@router.message(StateFilter(None), F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
async def trip(message: Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏–ª–∏ –≤—ã–±–∏—Ä–∏—Ç–µ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤:",
        reply_markup=kb.make_row_keyboard(trip_name_templates)
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(states.CreateTrip.choosing_trip_name)


@router.message(
    states.CreateTrip.choosing_trip_name,
    #F.text.in_(trip_templates) –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—ã—Ä–∏–∞–Ω—Ç–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
)
async def trip_name_chosen(message: Message, state: FSMContext):
    await state.update_data(trip_name=message.text.lower())  # TODO –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–± —á–µ—Ä–µ–∑ pydantic
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=kb.make_row_keyboard(trip_start_time_templates)
    )
    await state.set_state(states.CreateTrip.choosing_trip_start_time)


@router.message(
    states.CreateTrip.choosing_trip_start_time,
    #F.text.in_(trip_templates) –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—ã—Ä–∏–∞–Ω—Ç–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
)
async def trip_start_time_chosen(message: Message, state: FSMContext):
    await state.update_data(trip_start_time=message.text.lower())
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=kb.make_row_keyboard(trip_start_point_templates)
    )
    await state.set_state(states.CreateTrip.choosing_trip_start_point)


@router.message(
    states.CreateTrip.choosing_trip_start_point,
    #F.text.in_(trip_templates) –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—ã—Ä–∏–∞–Ω—Ç–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
)
async def trip_start_point_chosen(message: Message, state: FSMContext):
    await state.update_data(trip_start_point=message.text.lower())
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=kb.make_row_keyboard(trip_finish_time_templates)
    )
    await state.set_state(states.CreateTrip.choosing_trip_finish_time)


@router.message(
    states.CreateTrip.choosing_trip_finish_time,
    #F.text.in_(trip_templates) –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –≤—ã—Ä–∏–∞–Ω—Ç–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
)
async def trip_finish_time_chosen(message: Message, state: FSMContext):
    await state.update_data(trip_finish_point=message.text.lower())
    await message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=kb.make_row_keyboard(trip_finish_point_templates)
    )
    await state.set_state(states.CreateTrip.choosing_trip_finish_point)


# last state
@router.message(states.CreateTrip.choosing_trip_finish_point,
                #F.text.in_(available_food_sizes)
                )
async def trip_finish_point_chosen(message: Message, state: FSMContext):
    await state.update_data(trip_finish_time=message.text.lower())
    user_data = await state.get_data()  # TODO –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ö—Ä–∞–Ω–∏–µ–Ω–∏–µ –≤ –±–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await database.add_trip(datetime_start=utils.convert_str_to_dt(user_data['trip_start_time']),
                            datetime_finish=utils.convert_str_to_dt(user_data['trip_finish_time']),
                            user_id=message.from_user.id,
                            point_from=user_data['trip_start_point'],
                            point_to=user_data['trip_finish_point'],
                            )
    await message.answer(
        text=f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–µ–∑–¥–∫—É '{user_data['trip_name']}' "
             f"—Å—Ç–∞—Ä—Ç: {user_data['trip_start_point']} –≤ {user_data['trip_start_time']} "
             f"—Ñ–∏–Ω–∏—à: {user_data['trip_finish_point']} –≤ {user_data['trip_finish_time']}.",
        reply_markup=menu_main  # ReplyKeyboardRemove()  # or man_menu_kb
    )
    await state.clear()  # in last state TODO —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –ø–∞–Ω–µ–ª–∏ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–µ–º –º–µ—Å—Ç –∏ —Ç–¥
#------------------------------------------------------------------

@router.message(F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def without_puree(message: types.Message):
    await message.reply("—Å–ø–∏—Å–æ–∫ —Å —Ü–∏—Ñ—Ä–∞–º–∏")


#@router.message()
#async def message_handler(message: types.Message):
#    await message.answer(f"–¢–≤–æ–π ID: {message.from_user.id}")
